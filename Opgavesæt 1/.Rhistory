y_test <- test$Kvadratmeterpris
# Make predictions using the Lasso model and calculate the RMSE
y_pred <- predict(lasso.mod, newx = x_test, s = lambda_chosen)
MSE_Lasso <- mean((y_test - y_pred)^2)
RMSE_Lasso <- sqrt(MSE_Lasso)
print(coef_lasso)
print(coef_BSS)
coef_lasso
print(coef_BSS)
#### best subset selection
library(leaps)
fit.subset<-regsubsets(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar,test,nvmax=11)
summary(fit.subset)
summary(fit.subset)$rss
summary(fit.subset)$rsq
summary(fit.subset)$adjr2
summary(fit.subset)$cp
summary(fit.subset)$bic
## prÃ¦diktion
Xmat.test<-model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar,data=test)
coef_BSS<-coef(fit.subset,id=2)
predictions<-Xmat.test[,names(coef_BSS)]%*%coef_BSS
MSE_BSS <- mean((test$Kvadratmeterpris-predictions)^2)
RMSE_BSS <- sqrt(MSE_BSS)
# Training data
x <- model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar, train)[, -1]
y <- train$Kvadratmeterpris
# Fit Lasso model
lasso.mod <- glmnet(x, y, alpha = 1)
# Plot the coefficients
plot(lasso.mod, label=TRUE, xvar='lambda')
# Extract the coefficients for the chosen lambda
lambda_chosen <- lasso.mod$lambda.min  # or any other value of lambda that you want to use
coef_lasso <- coef(lasso.mod, s = lambda_chosen)
# Testing data
x_test <- model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar, test)[, -1]
y_test <- test$Kvadratmeterpris
# Make predictions using the Lasso model and calculate the RMSE
y_pred <- predict(lasso.mod, newx = x_test, s = lambda_chosen, type='coefficients')
MSE_Lasso <- mean((y_test - y_pred)^2)
RMSE_Lasso <- sqrt(MSE_Lasso)
# Training data
x <- model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar, train)[, -1]
y <- train$Kvadratmeterpris
# Fit Lasso model
lasso.mod <- glmnet(x, y, alpha = 1)
# Plot the coefficients
plot(lasso.mod, label=TRUE, xvar='lambda')
# Extract the coefficients for the chosen lambda
lambda_chosen <- lasso.mod$lambda.min  # or any other value of lambda that you want to use
coef_lasso <- coef(lasso.mod, s = lambda_chosen)
lasso.mod.final <- glmnet(x, y, alpha = 1)
predict(lasso.mod.final,type='coefficients',s=lambda_chosen)
# Testing data
x_test <- model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar, test)[, -1]
y_test <- test$Kvadratmeterpris
# Make predictions using the Lasso model and calculate the RMSE
y_pred <- predict(lasso.mod-final, newx = x_test, s = lambda_chosen)
# Training data
x <- model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar, train)[, -1]
y <- train$Kvadratmeterpris
# Fit Lasso model
lasso.mod <- glmnet(x, y, alpha = 1)
# Plot the coefficients
plot(lasso.mod, label=TRUE, xvar='lambda')
# Extract the coefficients for the chosen lambda
lambda_chosen <- lasso.mod$lambda.min  # or any other value of lambda that you want to use
coef_lasso <- coef(lasso.mod, s = lambda_chosen)
lasso.mod.final <- glmnet(x, y, alpha = 1)
predict(lasso.mod.final,type='coefficients',s=lambda_chosen)
# Testing data
x_test <- model.matrix(Kvadratmeterpris ~ Kvadratmeter*Postnummer + Hustype*Postnummer + AntalVarelser + Byggeaar, test)[, -1]
y_test <- test$Kvadratmeterpris
# Make predictions using the Lasso model and calculate the RMSE
y_pred <- predict(lasso.mod.final, newx = x_test, s = lambda_chosen)
MSE_Lasso <- mean((y_test - y_pred)^2)
RMSE_Lasso <- sqrt(MSE_Lasso)
coef_lasso
print(coef_BSS)
HouseholdCost <- read.delim("./HouseholdCost.txt")
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Salgspriser[trainIndex,]
test <- Salgspriser[-trainIndex,]
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Salgspriser[trainIndex,]
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
library(tidyverse)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
library(tidyverse)
library(caret)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
Solgt180_test <- test$Solgt180
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
pred.value <- 1*(pred.prob>0.5)
table(pred.value,Solgt180_test)
mean(pred.value!=Solgt180_test)
plot(roc(Solgt180_test~pred.prob,direction='<'))
auc(Solgt180_test~pred.prob,direction='<')
x<-model.matrix(Solgt180~.,Tilsalg)[,-1]
y<-titanic$Overlevelse
x<-model.matrix(Solgt180~.,Tilsalg)[,-1]
y<-Tilsalg$Solgt180
trainIndex <- createDataPartition(x$Solgt180, p = 0.6, list = FALSE)
library(tidyverse)
library(caret)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
Solgt180_test <- test$Solgt180
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
pred.value <- 1*(pred.prob>0.5)
table(pred.value,Solgt180_test)
mean(pred.value!=Solgt180_test)
plot(roc(Solgt180_test~pred.prob,direction='<'))
auc(Solgt180_test~pred.prob,direction='<')
ridge.mod<-glmnet(x[train,],y[train],alpha=0,family = 'binomial')
ridge.mod<-glmnet(train,test$Solgt180,alpha=0,family = 'binomial')
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
Solgt180_test <- test$Solgt180
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
pred.value <- 1*(pred.prob>0.5)
table(pred.value,Solgt180_test)
mean(pred.value!=Solgt180_test)
plot(roc(Solgt180_test~pred.prob,direction='<'))
auc(Solgt180_test~pred.prob,direction='<')
ridge.mod<-glmnet(train,test$Solgt180,alpha=0,family = 'binomial')
ridge.mod<-glmnet(train,train$Solgt180,alpha=0,family = 'binomial')
plot(ridge.mod,label=TRUE,xvar='lambda')
cv.ridge.train<-cv.glmnet(train,train$Solgt180,alpha=0,family='binomial',type.measure ='auc')
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
Solgt180_test <- test$Solgt180
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
Solgt180_test <- test$Solgt180
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
pred.value <- 1*(pred.prob>0.5)
table(pred.value,Solgt180_test)
mean(pred.value!=Solgt180_test)
plot(roc(Solgt180_test~pred.prob,direction='<'))
auc(Solgt180_test~pred.prob,direction='<')
# Create a vector of class labels (y)
y <- Tilsalg$Solgt180
# Create the design matrix (x)
x <- model.matrix(Solgt180 ~ ., data = Tilsalg)[,-1]
# Split the data into a 60-40 train-test split
train_index <- createDataPartition(y, p = 0.6, list = FALSE)
x_train <- x[train_index, ]
y_train <- y[train_index]
x_test <- x[-train_index, ]
y_test <- y[-train_index]
ridge.mod <- glmnet(x_train, y_train, alpha = 0, family = 'binomial')
plot(ridge.mod, label = TRUE, xvar = 'lambda')
cv.ridge.train <- cv.glmnet(x_train, y_train, alpha = 0, family = 'binomial', type.measure ='auc')
plot(cv.ridge.train)
best.lambda <- cv.ridge.train$lambda.min
best.lambda
ridge.mod.final <- glmnet(x_train, y_train, alpha = 0)
predict(ridge.mod.final, type = 'coefficients', s = best.lambda)
# Optimize for auc in the test data set.
# If you want to optimize for error rate instead, use 'class' instead of 'auc'.
pred.prob.ridge <- as.vector(predict(ridge.mod.final, s = best.lambda, newx = x_test))
pred.value.ridge <- 1*(pred.prob.ridge > 0.5)
plot(roc(y_test ~ pred.prob.ridge, direction='<'))
auc(y_test ~ pred.prob.ridge, direction='<')
mean(pred.value.ridge != y_test)
fit.lda<-lda(Solgt180~.,data=train)
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
install.packages("mvtnorm")
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
library(pROC)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
library(pROC)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
library(pROC)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
library(pROC)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
library(pROC)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
library(pROC)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
library(mvtnorm)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
View(Tilsalg)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
# Set the seed for reproducibility
set.seed(123)
# Split the dataset into train and test sets
trainIndex <- createDataPartition(Tilsalg$Solgt180, p = 0.6, list = FALSE)
train <- Tilsalg[trainIndex,]
test <- Tilsalg[-trainIndex,]
Solgt180_test <- test$Solgt180
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
pred.value <- 1*(pred.prob>0.5)
table(pred.value,Solgt180_test)
mean(pred.value!=Solgt180_test)
plot(roc(Solgt180_test~pred.prob,direction='<'))
auc(Solgt180_test~pred.prob,direction='<')
# Create a vector of class labels (y)
y <- Tilsalg$Solgt180
# Create the design matrix (x)
x <- model.matrix(Solgt180 ~ ., data = Tilsalg)[,-1]
# Split the data into a 60-40 train-test split
train_index <- createDataPartition(y, p = 0.6, list = FALSE)
x_train <- x[train_index, ]
y_train <- y[train_index]
x_test <- x[-train_index, ]
y_test <- y[-train_index]
ridge.mod <- glmnet(x_train, y_train, alpha = 0, family = 'binomial')
plot(ridge.mod, label = TRUE, xvar = 'lambda')
cv.ridge.train <- cv.glmnet(x_train, y_train, alpha = 0, family = 'binomial', type.measure ='auc')
plot(cv.ridge.train)
best.lambda <- cv.ridge.train$lambda.min
best.lambda
ridge.mod.final <- glmnet(x_train, y_train, alpha = 0)
predict(ridge.mod.final, type = 'coefficients', s = best.lambda)
# Optimize for auc in the test data set.
# If you want to optimize for error rate instead, use 'class' instead of 'auc'.
pred.prob.ridge <- as.vector(predict(ridge.mod.final, s = best.lambda, newx = x_test))
pred.value.ridge <- 1*(pred.prob.ridge > 0.5)
plot(roc(y_test ~ pred.prob.ridge, direction='<'))
auc(y_test ~ pred.prob.ridge, direction='<')
mean(pred.value.ridge != y_test)
# Fit the Lasso model on the training data
lasso.mod <- glmnet(x_train, y_train, alpha = 1, family = 'binomial')
# Plot the Lasso coefficient path
plot(lasso.mod, xvar = 'lambda', label = TRUE)
# Perform cross-validation to select the best lambda value
cv.lasso.train <- cv.glmnet(x_train, y_train, alpha = 1, family = 'binomial', type.measure = 'auc')
plot(cv.lasso.train)
# Get the best lambda value
best.lambda <- cv.lasso.train$lambda.min
# Fit the final Lasso model on the training data using the best lambda value
lasso.mod.final <- glmnet(x_train, y_train, alpha = 1)
predict(lasso.mod.final, type = 'coefficients', s = best.lambda)
# Make predictions on the test data using the final Lasso model
pred.prob.lasso <- as.vector(predict(lasso.mod.final, s = best.lambda, newx = x_test))
pred.value.lasso <- 1 * (pred.prob.lasso > 0.5)
# Plot the ROC curve and calculate the AUC
plot(roc(y_test ~ pred.prob.lasso, direction = '<'))
auc(y_test ~ pred.prob.lasso, direction = '<')
# Calculate the classification error rate
mean(pred.value.lasso != y_test)
library(MASS)
library(pROC)
# Create a vector of class labels (y)
y <- Tilsalg$Solgt180
# Create the design matrix (x)
x <- model.matrix(Solgt180 ~ ., data = Tilsalg)[,-1]
# Split the data into a 60-40 train-test split
train_index <- createDataPartition(y, p = 0.6, list = FALSE)
x_train <- x[train_index, ]
y_train <- y[train_index]
x_test <- x[-train_index, ]
y_test <- y[-train_index]
# Fit LDA model to training data
lda.fit <- lda(x_train, y_train)
# Predict class labels for test data using LDA model
lda.pred <- predict(lda.fit, x_test)
# Calculate classification accuracy on test data
accuracy <- mean(lda.pred$class == y_test)
print(paste0("Classification accuracy: ", accuracy))
# Plot ROC curve
roc.curve <- roc(y_test, lda.pred$posterior[,2])
plot(roc.curve, main = "ROC curve for LDA", print.auc = TRUE)
# Fit QDA model to training data
qda.fit <- qda(x_train, y_train)
# Predict class labels for test data using QDA model
qda.pred <- predict(qda.fit, x_test)
# Calculate classification accuracy on test data
accuracy <- mean(qda.pred$class == y_test)
print(paste0("Classification accuracy: ", accuracy))
# Plot ROC curve
roc.curve <- roc(y_test, qda.pred$posterior[,2])
plot(roc.curve, main = "ROC curve for QDA", print.auc = TRUE)
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
library(pROC)
fit.logistic <- glm(Solgt180 ~ .,data=train,family='binomial')
summary(fit.logistic)
pred.prob <- predict(fit.logistic, newdata = test, type='response')
pred.value <- 1*(pred.prob>0.5)
table(pred.value,Solgt180_test)
mean(pred.value!=Solgt180_test)
plot(roc(Solgt180_test~pred.prob,direction='<'),main = "ROC curve for Logistic regression", print.auc = TRUE)
auc(Solgt180_test~pred.prob,direction='<')
# Create a vector of class labels (y)
y <- Tilsalg$Solgt180
# Create the design matrix (x)
x <- model.matrix(Solgt180 ~ ., data = Tilsalg)[,-1]
# Split the data into a 60-40 train-test split
train_index <- createDataPartition(y, p = 0.6, list = FALSE)
x_train <- x[train_index, ]
y_train <- y[train_index]
x_test <- x[-train_index, ]
y_test <- y[-train_index]
ridge.mod <- glmnet(x_train, y_train, alpha = 0, family = 'binomial')
plot(ridge.mod, label = TRUE, xvar = 'lambda')
cv.ridge.train <- cv.glmnet(x_train, y_train, alpha = 0, family = 'binomial', type.measure ='auc')
plot(cv.ridge.train)
best.lambda <- cv.ridge.train$lambda.min
best.lambda
ridge.mod.final <- glmnet(x_train, y_train, alpha = 0)
predict(ridge.mod.final, type = 'coefficients', s = best.lambda)
# Optimize for auc in the test data set.
# If you want to optimize for error rate instead, use 'class' instead of 'auc'.
pred.prob.ridge <- as.vector(predict(ridge.mod.final, s = best.lambda, newx = x_test))
pred.value.ridge <- 1*(pred.prob.ridge > 0.5)
plot(roc(y_test ~ pred.prob.ridge, direction='<'),main = "ROC curve for Logistic regression (Ridge)", print.auc = TRUE)
auc(y_test ~ pred.prob.ridge, direction='<')
mean(pred.value.ridge != y_test)
# Fit the Lasso model on the training data
lasso.mod <- glmnet(x_train, y_train, alpha = 1, family = 'binomial')
# Plot the Lasso coefficient path
plot(lasso.mod, xvar = 'lambda', label = TRUE)
# Perform cross-validation to select the best lambda value
cv.lasso.train <- cv.glmnet(x_train, y_train, alpha = 1, family = 'binomial', type.measure = 'auc')
plot(cv.lasso.train)
# Get the best lambda value
best.lambda <- cv.lasso.train$lambda.min
# Fit the final Lasso model on the training data using the best lambda value
lasso.mod.final <- glmnet(x_train, y_train, alpha = 1)
predict(lasso.mod.final, type = 'coefficients', s = best.lambda)
# Make predictions on the test data using the final Lasso model
pred.prob.lasso <- as.vector(predict(lasso.mod.final, s = best.lambda, newx = x_test))
pred.value.lasso <- 1 * (pred.prob.lasso > 0.5)
# Plot the ROC curve and calculate the AUC
plot(roc(y_test ~ pred.prob.lasso, direction = '<'),main = "ROC curve for Logistic regression (Lasso)", print.auc = TRUE)
auc(y_test ~ pred.prob.lasso, direction = '<')
# Calculate the classification error rate
mean(pred.value.lasso != y_test)
library(tidyverse)
library(caret)
library(glmnet)
Tilsalg <- read.delim("./Tilsalg.txt")
Tilsalg$Postnummer <- as.factor(Tilsalg$Postnummer)
Tilsalg <- select(Tilsalg, c('AntalVarelser', 'NetPrMd', 'Kvadratmeter', 'KvadratmeterGrund', 'Byggeaar', 'Kvadratmeterpris', 'Postnummer', 'Hustype', 'Solgt180'))
